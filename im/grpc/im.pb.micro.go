// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: im.proto

package quick_find_services_im

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for IMServices service

type IMServicesService interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*SendMessageResponse, error)
	Translate(ctx context.Context, in *TranslateRequest, opts ...client.CallOption) (*TranslateResponse, error)
}

type iMServicesService struct {
	c    client.Client
	name string
}

func NewIMServicesService(name string, c client.Client) IMServicesService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "quick.find.services.im"
	}
	return &iMServicesService{
		c:    c,
		name: name,
	}
}

func (c *iMServicesService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*SendMessageResponse, error) {
	req := c.c.NewRequest(c.name, "IMServices.SendMessage", in)
	out := new(SendMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMServicesService) Translate(ctx context.Context, in *TranslateRequest, opts ...client.CallOption) (*TranslateResponse, error) {
	req := c.c.NewRequest(c.name, "IMServices.Translate", in)
	out := new(TranslateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IMServices service

type IMServicesHandler interface {
	SendMessage(context.Context, *SendMessageRequest, *SendMessageResponse) error
	Translate(context.Context, *TranslateRequest, *TranslateResponse) error
}

func RegisterIMServicesHandler(s server.Server, hdlr IMServicesHandler, opts ...server.HandlerOption) error {
	type iMServices interface {
		SendMessage(ctx context.Context, in *SendMessageRequest, out *SendMessageResponse) error
		Translate(ctx context.Context, in *TranslateRequest, out *TranslateResponse) error
	}
	type IMServices struct {
		iMServices
	}
	h := &iMServicesHandler{hdlr}
	return s.Handle(s.NewHandler(&IMServices{h}, opts...))
}

type iMServicesHandler struct {
	IMServicesHandler
}

func (h *iMServicesHandler) SendMessage(ctx context.Context, in *SendMessageRequest, out *SendMessageResponse) error {
	return h.IMServicesHandler.SendMessage(ctx, in, out)
}

func (h *iMServicesHandler) Translate(ctx context.Context, in *TranslateRequest, out *TranslateResponse) error {
	return h.IMServicesHandler.Translate(ctx, in, out)
}
