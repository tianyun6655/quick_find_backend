// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: topic.proto

package quick_find_services_topic

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TopicServices service

type TopicServicesService interface {
	Push(ctx context.Context, in *Publish, opts ...client.CallOption) (*PushResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*TopicList, error)
}

type topicServicesService struct {
	c    client.Client
	name string
}

func NewTopicServicesService(name string, c client.Client) TopicServicesService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "quick.find.services.topic"
	}
	return &topicServicesService{
		c:    c,
		name: name,
	}
}

func (c *topicServicesService) Push(ctx context.Context, in *Publish, opts ...client.CallOption) (*PushResponse, error) {
	req := c.c.NewRequest(c.name, "TopicServices.Push", in)
	out := new(PushResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServicesService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*TopicList, error) {
	req := c.c.NewRequest(c.name, "TopicServices.List", in)
	out := new(TopicList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TopicServices service

type TopicServicesHandler interface {
	Push(context.Context, *Publish, *PushResponse) error
	List(context.Context, *ListRequest, *TopicList) error
}

func RegisterTopicServicesHandler(s server.Server, hdlr TopicServicesHandler, opts ...server.HandlerOption) error {
	type topicServices interface {
		Push(ctx context.Context, in *Publish, out *PushResponse) error
		List(ctx context.Context, in *ListRequest, out *TopicList) error
	}
	type TopicServices struct {
		topicServices
	}
	h := &topicServicesHandler{hdlr}
	return s.Handle(s.NewHandler(&TopicServices{h}, opts...))
}

type topicServicesHandler struct {
	TopicServicesHandler
}

func (h *topicServicesHandler) Push(ctx context.Context, in *Publish, out *PushResponse) error {
	return h.TopicServicesHandler.Push(ctx, in, out)
}

func (h *topicServicesHandler) List(ctx context.Context, in *ListRequest, out *TopicList) error {
	return h.TopicServicesHandler.List(ctx, in, out)
}
